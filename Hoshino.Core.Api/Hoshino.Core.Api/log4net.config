<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <log4net>
    <!--按日期分割日志文件 一天一个-->
    <!-- appender 定义日志输出方式   将日志以回滚文件的形式写到文件中。-->
    <appender name="ErrorAppender" type="log4net.Appender.RollingFileAppender">
      <!--保存路径：下面路径项目启动的时候自动在C盘中创建log、logError文件-->
      <file value="log\\error\\"/>
      <!-- 如果想在本项目中添加路径，那就直接去掉C:\\  只设置log\\LogError   项目启动中默认创建文件 -->
      <appendToFile value="true"/>
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <rollingStyle value="Date"/>
      <!--这是按日期产生文件夹-->
      <datePattern value="yyyy\\MM\\yyyyMMdd'_error.log'"/>
      <!--是否只写到一个文件中-->
      <staticLogFileName value="false"/>
      <!--保留的log文件数量 超过此数量后 自动删除之前的   好像只有在 按Size分割时有效 设定值value="－1"为不限文件数-->
      <param name="MaxSizeRollBackups" value="100"/>
      <!--每个文件的大小。只在混合方式与文件大小方式下使用。超出大小后在所有文件名后自动增加正整数重新命名，数字最大的最早写入。可用的单位:KB|MB|GB。不要使用小数,否则会一直写入当前日志-->
      <maximumFileSize value="1GB" />
      <!-- layout 控制Appender的输出格式，也可以是xml  一个Appender只能是一个layout-->
      <layout type="log4net.Layout.PatternLayout">
        <!--每条日志末尾的文字说明-->
        <!--输出格式 模板-->
        <!-- <param name="ConversionPattern"  value="记录时间：%date 线程ID:[%thread] 日志级别：%-5level 记录类：%logger   
        操作者ID：%property{Operator} 操作类型：%property{Action}%n  当前机器名:%property%n当前机器名及登录用户：%username %n  
        记录位置：%location%n 消息描述：%property{Message}%n   异常：%exception%n 消息：%message%newline%n%n" />-->

        <!--样例：2008-03-26 13:42:32,111 [10] INFO  Log4NetDemo.MainClass [(null)] - info-->
        <!--<conversionPattern value="%n＝＝＝＝＝＝＝＝＝＝
                                  %n【日志级别】%-5level
                                  %n【记录时间】%date
                                  %n【线程编号】[%thread]
                                  %n【执行时间】[%r]毫秒
                                  %n【出错文件】%F
                                  %n【出错行号】%L
                                  %n【出错的类】%logger 属性[%property{NDC}]
                                  %n【错误描述】%message
                                  %n【错误详情】%newline"/>-->
        <conversionPattern value="%n＝＝＝＝＝＝＝＝＝＝
                                  %n【记录时间】%date
                                  %n【执行时间】[%r]毫秒【日志级别】%-5level【线程编号】[%thread] 
                                  %n【错误描述】%message"/>
      </layout>
      <filter type="log4net.Filter.LevelRangeFilter">
        <levelMin value="DEBUG" />
        <levelMax value="FATAL" />
      </filter>
    </appender>


    <!--按日期分割日志文件 一天一个-->
    <!-- appender 定义日志输出方式   将日志以回滚文件的形式写到文件中。-->
    <appender name="InfoAppender" type="log4net.Appender.RollingFileAppender">
      <!--保存路径：下面路径项目启动的时候自动在C盘中创建log、logError文件-->
      <file value="log\\info\\"/>
      <!-- 如果想在本项目中添加路径，那就直接去掉C:\\  只设置log\\LogError   项目启动中默认创建文件 -->
      <appendToFile value="true"/>
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <rollingStyle value="Date"/>
      <!--这是按日期产生文件夹-->
      <datePattern value="yyyy\\MM\\yyyyMMdd'_info.log'"/>
      <!--是否只写到一个文件中-->
      <staticLogFileName value="false"/>
      <!--保留的log文件数量 超过此数量后 自动删除之前的   好像只有在 按Size分割时有效 设定值value="－1"为不限文件数-->
      <param name="MaxSizeRollBackups" value="100"/>
      <!--每个文件的大小。只在混合方式与文件大小方式下使用。超出大小后在所有文件名后自动增加正整数重新命名，数字最大的最早写入。可用的单位:KB|MB|GB。不要使用小数,否则会一直写入当前日志-->
      <maximumFileSize value="1GB" />
      <!-- layout 控制Appender的输出格式，也可以是xml  一个Appender只能是一个layout-->
      <layout type="log4net.Layout.PatternLayout">
        <!--每条日志末尾的文字说明-->
        <!--输出格式 模板-->
        <!-- <param name="ConversionPattern"  value="记录时间：%date 线程ID:[%thread] 日志级别：%-5level 记录类：%logger   
        操作者ID：%property{Operator} 操作类型：%property{Action}%n  当前机器名:%property%n当前机器名及登录用户：%username %n  
        记录位置：%location%n 消息描述：%property{Message}%n   异常：%exception%n 消息：%message%newline%n%n" />-->

        <!--样例：2008-03-26 13:42:32,111 [10] INFO  Log4NetDemo.MainClass [(null)] - info-->
        <!--<conversionPattern value="%n＝＝＝＝＝＝＝＝＝＝
                                  %n【日志级别】%-5level
                                  %n【记录时间】%date
                                  %n【线程编号】[%thread]
                                  %n【执行时间】[%r]毫秒
                                  %n【出错文件】%F
                                  %n【出错行号】%L
                                  %n【出错的类】%logger 属性[%property{NDC}]
                                  %n【错误描述】%message
                                  %n【错误详情】%newline"/>-->
        <conversionPattern value="%n＝＝＝＝＝＝＝＝＝＝
                                  %n【记录时间】%date
                                  %n【执行时间】[%r]毫秒【日志级别】%-5level【线程编号】[%thread] 
                                  %n【描述】%message"/>
      </layout>
      <filter type="log4net.Filter.LevelRangeFilter">
        <levelMin value="DEBUG" />
        <levelMax value="FATAL" />
      </filter>
    </appender>


    <appender name="DBLogAppender" type="log4net.Appender.ADONetAppender">
      <!--日志缓存写入条数 设置为0时只要有一条就立刻写到数据库-->
      <bufferSize value="0" />
      <!--日志数据库连接串-->
      <connectionType value="MySql.Data.MySqlClient.MySqlConnection,MySql.Data" />
      <connectionString value="Server =127.0.0.1; Database =blog; Uid =root; Pwd =root;Pooling=true; Max Pool Size=100;Min Pool Size=10;Allow Batch=true; Allow User Variables=True;Charset=utf8;" providerName="MySql.Data.MySqlClient" />
      <!--日志数据库脚本-->
      <commandText value="INSERT INTO tx_log_info(id,chain_id,content,interface_name,call_type,creation_time,ip) VALUES(@id,@chain_id,@content,@interface_name,@call_type,@creation_time,@ip)" />

      <parameter>
        <parameterName value="@id" />
        <dbType value="String" />
        <size value="36" />
        <layout type="Core.Common.Layout.DBLogLayout" >
          <conversionPattern value = "%property{id}"/>
        </layout>
      </parameter>

      <parameter>
        <parameterName value="@chain_id" />
        <dbType value="String" />
        <size value="36" />
        <layout type="Core.Common.Layout.DBLogLayout" >
          <conversionPattern value = "%property{chain_id}"/>
        </layout>
      </parameter>

      <parameter>
        <parameterName value="@content" />
        <dbType value="String" />
        <size value="500" />
        <layout type="Core.Common.Layout.DBLogLayout" >
          <conversionPattern value = "%property{content}"/>
        </layout>
      </parameter>

      <parameter>
        <parameterName value="@interface_name" />
        <dbType value="String" />
        <size value="300" />
        <layout type="Core.Common.Layout.DBLogLayout" >
          <conversionPattern value = "%property{interface_name}"/>
        </layout>
      </parameter>

      <parameter>
        <parameterName value="@call_type" />
        <dbType value="Int64" />
        <size value="2" />
        <layout type="Core.Common.Layout.DBLogLayout" >
          <conversionPattern value = "%property{call_type}"/>
        </layout>
      </parameter>

      <parameter>
        <parameterName value="@creation_time" />
        <dbType value="DateTime" />
        <layout type="Core.Common.Layout.DBLogLayout" >
          <conversionPattern value = "%property{creation_time}"/>
        </layout>
      </parameter>

      <parameter>
        <parameterName value="@ip" />
        <dbType value="String" />
        <size value="30" />
        <layout type="Core.Common.Layout.DBLogLayout" >
          <conversionPattern value = "%property{ip}"/>
        </layout>
      </parameter>
    </appender>

    <!--文本Error日志-->
    <logger name="LogError">
      <level value="ERROR" />
      <appender-ref ref="ErrorAppender" />
    </logger>
    <!--文本Info日志-->
    <logger name="LogInfo">
      <level value="INFO" />
      <appender-ref ref="InfoAppender" />
    </logger>
    <!--数据库tc_log日志-->
    <logger name="LogDB">
      <level value="ALL"/>
      <appender-ref ref="DBLogAppender" />
    </logger>

  </log4net>
</configuration>